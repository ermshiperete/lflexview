function PlaySound(a, b) { var c = new Audio; if (c.canPlayType("audio/mpeg;")) { c.src = "/sounds/" + b + ".mp3"; c.play() } else { $.ajax({ url: "/sounds/" + a + ".wav", type: "HEAD", success: function () { c.src = "/sounds/" + a + ".wav"; c.play() }, error: function (a, c, d) { if (b != null) { var e = new Audio; e.src = "/sounds/" + b + ".wav"; e.play() } } }) } } function cufonizePage() { Cufon.replace("h4", { fontFamily: "Fertigo Pro" }); Cufon.replace("div.thaiH4", { fontFamily: "SP ThunderFox" }); Cufon.replace("h5", { fontFamily: "Fertigo Pro" }); $("div.thaiH4").show() } function setStripeMeHeight(a) { var b = $(a); b.find("div.stripeMe:eq(0)").addClass("stripeFirst"); b.find("div.stripeMe:odd").addClass("stripeOdd").removeClass("stripeEven"); b.find("div.stripeMe:even").addClass("stripeEven").removeClass("stripeOdd"); b.find("div.stripeMe").each(function () { var a = $(this); var b = a.attr("class"); var c = a.find("div.floatedMeanings"); var d = c.height(); if (d < 40) { c.css("padding-top", "10px") } else { a.height(d) } }) } function highlightThisWord(a, b) { a.find("span.t2e").each(function () { if ($(this).html() == b) { $(this).addClass("blueText") } }) } function cufonizeHeaders(a) { Cufonreplace(a.find("h4").show(), { fontFamily: "Fertigo Pro" }); Cufonreplace(a.find(".thaiH4").show(), { fontFamily: "SP ThunderFox" }) } function cufonizePage() { Cufonreplace($("div.thaiH4").show(), { fontFamily: "SP ThunderFox" }); Cufonreplace($("h4 , h5").show(), { fontFamily: "Fertigo Pro" }) } function Cufonreplace(a, b) { Cufon.replace(a, b); a.find("div.thaiH4").show() } function showObjectProperties(a, b) { for (var c in a) { if (b) { var d = b + "---.---" + c + "---\n---" + a[c] } else { var d = c + "---\n---" + a[c] + "---" } if (!confirm(d)) { return } if (typeof a[c] == "object") { if (b) { showObjectProperties(a[c], b + "." + c) } else { showObjectProperties(a[c], c) } } } } function isEmail(a) { if (a.search(/^\w+((-\w+)|(\.\w+))*\@[A-Za-z0-9]+((\.|-)[A-Za-z0-9]+)*\.[A-Za-z0-9]+$/) != -1) { return true } else { return false } } function loadBalloonTags() { if (typeof $balloonClose.length == "undefined") { var a = '<div id="balloonCornersContainer"><img id="balloonLbg"><img id="balloonRbg"><img id="balloonTbg"><img id="balloonBbg"><img id="balloonBr"><img id="balloonBl"><img id="balloonTl"><img id="balloonTr">	<img id="balloonArrow"> <img id="balloonClose" onClick="hideDef()"></div><div id="balloonContainer" onMouseOver="keepLayer()"></div>'; $("#relatedArticlesHdrContainer").before(a); var b = 8; var c = 35; $balloonClose = $("#balloonClose"); $balloonBl = $("#balloonBl"); $balloonBr = $("#balloonBr"); $balloonTl = $("#balloonTl"); $balloonTr = $("#balloonTr"); $balloonTbg = $("#balloonTbg"); $balloonBbg = $("#balloonBbg"); $balloonLbg = $("#balloonLbg"); $balloonRbg = $("#balloonRbg"); $balloonContainer = $("#balloonContainer"); $balloonArrow = $("#balloonArrow"); $balloonCornersContainer = $("#balloonCornersContainer"); $balloonClose.attr("src", fullPath + "/img/balloon/balloon-close.gif"); $balloonBl.attr("src", fullPath + "/img/balloon/ballon-corner-bl.gif"); $balloonBr.attr("src", fullPath + "/img/balloon/ballon-corner-br.gif"); $balloonTl.attr("src", fullPath + "/img/balloon/ballon-corner-tl.gif"); $balloonTr.attr("src", fullPath + "/img/balloon/ballon-corner-tr.gif"); $balloonTbg.attr("src", fullPath + "/img/balloon/ballon-bgt.gif").attr("height", 2); $balloonBbg.attr("src", fullPath + "/img/balloon/ballon-bgb.gif").attr("height", 2); $balloonLbg.attr("src", fullPath + "/img/balloon/ballon-bgl.gif").attr("width", b); $balloonRbg.attr("src", fullPath + "/img/balloon/ballon-bgr.gif").attr("width", b) } } function getHTMLForId(a, b) { var c = ""; var d = ""; if (a.HasSound) { d = '<img src="' + fullPath + '/img/sound.gif" width=22 height=13 align="bottom" style=" padding-right:8px; cursor:pointer" onClick="javascript:PlaySound(\'' + b + "')\">" } for (var e in a.Meanings) { var f = a.Meanings[e].Meaning; if (f == null) { f = category } f = f.replace(/<BR>/g, '</span><BR><span class="MouseoverText"  style="background: url(\'' + fullPath + "/img/ra.gif') no-repeat 7px 4px;\">"); c += '<span class="MouseoverText" style="background: url(\'' + fullPath + "/img/ra.gif') no-repeat 7px 4px;\">  " + f + " </span><BR>" } c = '<div id="popupDefMeanings" style="font-size:17px "  >' + c + "  </div >"; wordHTML = d + '<a id="balloonWord" href="javascript:openRowLink(\'' + b + '\')" class="t2e" style="padding-right:15px; padding-left:2px;padding-bottom:4px; ">' + b + '</a><span id="balloonTranslit" class="t2etlit_highlight">' + a.Transliteration + ' </span>	<div id="balloonMeaningsContainer" style="padding-top:11px; padding-bottom:7px; ">' + c + "</div>"; return wordHTML } function t2eOver(a) { keepLayer(); for (var b in highlightedIds) { $("#" + highlightedIds[b]).removeClass("t2e_highlight").removeClass("t2etlit_highlight") } highlightedIds = new Array; var c = a.attr("id"); a.addClass("t2e_highlight"); highlightedIds[0] = c; var d = c.replace(/T2E/g, "UC"); var e = $("#" + d); e.addClass("t2etlit_highlight"); highlightedIds.push(d); var f = wordObjects[c.replace(/T2E/g, "")]; var g = '<div id="balloonWordAndTranslitContainer" style="padding-top:2px">'; if (f.GroupedIds != null) { for (var b in f.GroupedIds) { var h = f.GroupedIds[b]; var i = wordObjects[h]; var j = $("#T2E" + h); g += getHTMLForId(i, j.text()); $("#T2E" + h).addClass("t2e_highlight"); highlightedIds.push("T2E" + h) } } else { g += getHTMLForId(f, a.text()) } g += "</div>"; setBalloonPosition(g, a.offset().left, a.offset().top, a.outerHeight(), false) } function t2eOut(a) { hideLayer = window.setTimeout("hideDef()", 200); return true } function hideDef() { loadBalloonTags(); $balloonCornersContainer.hide(); $balloonContainer.hide(); $("span.t2e_highlight").removeClass("t2e_highlight"); $("span.t2etlit_highlight").removeClass("t2etlit_highlight") } function keepLayer() { if (hideLayer) { clearTimeout(hideLayer) } } function setBalloonPosition(a, b, c, d, e) { loadBalloonTags(); $balloonContainer.css("left", offsetFromLeft).css("top", 1).css("padding-right", "2").css("z-index", 2).html(a).show(); $balloonCornersContainer.show(); var f = $balloonContainer.outerWidth(); if (f < 340) { $balloonContainer.css("padding-right", "40"); f = $balloonContainer.outerWidth() } var g = b; var h = $("body").outerWidth(); var i = h - (g + f); var j = g; var k = 8; var l = "left"; $balloonArrow.attr("src", fullPath + "/img/balloon/ballon-arrow-bl.gif"); if (i < 10) { j = j + i - 15; k = g - j - k; if (k > 100) { $balloonArrow.attr("src", fullPath + "/img/balloon/ballon-arrow-br.gif"); k = k - 8; l = "right" } else { k = k + 16 } } var m = $balloonContainer.outerHeight(); var n = c; var o = $(document).scrollTop(); var p = 10; if (d > 30) { p = d / 2 } var q = n - m - d + p; var r = q + m - borderHeight; if (o + m + arrowHeight > n || e == true) { r = n + d; if (l == "left") { $balloonArrow.attr("src", fullPath + "/img/balloon/ballon-arrow-tl.gif") } else { $balloonArrow.attr("src", fullPath + "/img/balloon/ballon-arrow-tr.gif") } q = n + d + arrowHeight - borderHeight } $balloonContainer.css({ left: j, top: q }); $balloonArrow.css({ left: j + k, top: r }); $balloonClose.css({ left: j + f - cornerWidth - 4, top: q + 5 }); $balloonBl.css({ left: j - cornerWidth, top: q + m - cornerHeight }); $balloonBr.css({ left: j + f, top: q + m - cornerHeight }); if (q == lastBalloonTop) { $balloonTl.css("left", j - cornerWidth); $balloonTr.css("left", j + f); $balloonTbg.width(f).css("left", j) } else { $balloonTl.css({ left: j - cornerWidth, top: q }); $balloonTr.css({ left: j + f, top: q }); $balloonTbg.width(f).css({ left: j, top: q }) } $balloonBbg.width(f).css({ left: j, top: q + m - 2 }); $balloonLbg.height(m - cornerHeight - cornerHeight).css({ left: j - cornerWidth, top: q + cornerHeight }); $balloonRbg.height(m - cornerHeight - cornerHeight).css({ left: j + f, top: q + cornerHeight }); lastBalloonTop = q } function addNewQuery_callback(a, b) { var c = jQuery.parseJSON(a); b.html("<div>" + c.Query + "</div>"); addEventDelegation(b); for (var d in c.Sentences) { addToWordObjects(c.Sentences[d].WordObjects, c.Sentences[d].RandomPrefix) } autoShowLines() } function addToWordObjects(a, b) { var c = typeof a == "object" ? a : jQuery.parseJSON(a); for (var d in c) { wordObjects[b + "" + d] = c[d] } } function htmlEncode(a) { if (a) { return jQuery("<div />").text(a).html() } else { return "" } } function ajaxMouseovers(a) { var b = []; var c = []; var d; a.find("span.thai").each(function (a) { d = $(this); b[a] = d.text(); c[a] = d }); var e = []; var f = []; a.find("span.uc").each(function (a) { d = $(this); e[a] = d.html(); f[a] = d }); var g = "thaiTags=" + encodeURIComponent(htmlEncode(JSON.stringify(b))) + "&tlitTags=" + encodeURIComponent(htmlEncode(JSON.stringify(e))); $.ajax({ type: "POST", url: "/ajax/LaunchMouseoversThread.aspx", data: g, dataType: "html", success: function (b) { var d = jQuery.parseJSON(b); for (var e = 0; e < d.Sentences.length; e++) { var g = d.Sentences[e]; addToWordObjects(g.WordObjects, g.RandomPrefix) } for (var e = 0; e < d.ThaiTags.length; e++) { c[e].html(d.ThaiTags[e]) } for (var e = 0; e < d.TlitTags.length; e++) { f[e].html(d.TlitTags[e]) } addEventDelegation(a) } }) } function addEventDelegation(a) { if (a == "queryText") { a = $("#queryText") } if (a.hasEvents() == false) { a.bind("mouseover", function (a) { if ($(a.target).is("span.t2e")) { t2eOver($(a.target)) } }).bind("mouseout", function (a) { if ($(a.target).is("span.t2e_highlight")) { t2eOut($(a.target)) } }) } $("#queryLoadedMsg").show(); $("#queryMsg ").html("") } function showTranslationTip() { setTimeout(function () { var a = '<div class=ctTip style="padding:5px; z-index:50; padding-left:55px; padding-right:35px; padding-top:8px; padding-bottom:12px">You can click on the arrow at the start of each line to <BR>see context-sensitive translations for each of the words.</div>'; var b = true; if (isTyping == true) { b = false } if ($(".lineArrow:eq(0)").size() > 0) { setBalloonPosition(a, $(".lineArrow:eq(0)").offset().left, $(".lineArrow:eq(0)").offset().top, 27, b) } }, 400) } function autoShowLines() { var a = $("table.transTableLine:first"); if (a.text().length < 2e4) { showThisLine(a) } } function showThisLine(a) { var b = '<table style=" width:95%; padding:3px; padding-left:35px; margin:auto; margin-bottom:5px;  margin-top:5px">'; var c; var d = true; if (a.closest("#reverseSearchLoading , #dictionaryEngMeanings").size() > 0) { d = false } var e = a.closest("div.stripeMe"); if (a.closest("#queryText , #convertedThai , #dictionaryEngMeanings").size() > 0) { e = a } var f = {}; a.find("li.listThaiLine").find("span.t2e , span.t2e_nonThai").each(function (a) { var b = $(this).attr("id"); var c = wordObjects[b.replace("T2E", "")]; if (c.GroupedIds != null) { for (var d in c.GroupedIds) { var e = c.GroupedIds[d]; var g = wordObjects[e]; var h = $("#" + e); f["I" + e] = h.text() } } else { f["I" + $(this).attr("id")] = $(this).text() } }); for (var g in f) { var h = wordObjects[g.replace("I", "")]; if (typeof c != "undefined" && h.SentenceId != c) { b += "<tr><td></td>"; b += "<td></td>"; b += "<td>·</td></tr>"; c = h.SentenceId } var i; if (g != "") { i = h.Word; var j = h.Transliteration; var k = ""; var l = false; for (var m in h.Meanings) { var n = h.Meanings[m].Meaning; if (d && !l) { n = jQuery.trim(n).replace(/^(.+?)(;|$)/, "<b>$1</b>$2"); n = n.replace(/<i>/g, "</b><i>"); n = n.replace(/<\/i>/g, "</i><b>"); l = true } k += n + "<BR>" } } else { i = f[g] } if (i.match(/^\s+$/)) { j = "" } else { if (j == null) { j = "  "; k = "<b>" + i + "</b>"; i = "  " } } b += '<tr><td  style="padding-right:15px;border-bottom: #ddd  1px dashed;"><span class=t2e_line>' + i + "</span></td>"; b += '<td style="padding-right:25px;border-bottom: #ddd  1px dashed; "><span class=uc>' + j + "</span></td>"; b += '<td width=60% style="border-bottom: #ddd  1px dashed;">' + k + "</td></tr>" } b += "<tr><td colspan=3 align=right>"; b += "</td></tr></table>"; if (e.next("div.t2e_lineMeanings").size() > 0) { hideLine(e) } else { e.after('<div class=t2e_lineMeanings style="display:none;"> ' + b + " </div>"); e.next("div.t2e_lineMeanings").slideDown(250); if (isTyping == false) { setTimeout(function () { $.scrollTo(e.next("div.t2e_lineMeanings").offset().top, 200) }, 300) } } } function hideLine(a) { a.next("div.t2e_lineMeanings").slideToggle(250); hideDef(); setTimeout(function () { $.scrollTo(a.next("div.t2e_lineMeanings").offset().top, 200) }, 300) } (function (a) { a.fn.preloadImages = function () { for (var a = 0; a < arguments.length; a++) { jQuery("<img>").attr("src", arguments[a]) } } })(jQuery); (function (a) { a.fn.hasEvents = function () { return new Boolean(this.data("events")) } })(jQuery); JSON = function () { function f(a) { return a < 10 ? "0" + a : a } function stringify(a, b) { var c, d, e, f, g = /["\\\x00-\x1f\x7f-\x9f]/g, h; switch (typeof a) { case "string": return g.test(a) ? '"' + a.replace(g, function (a) { var b = m[a]; if (b) { return b } b = a.charCodeAt(); return "\\u00" + Math.floor(b / 16).toString(16) + (b % 16).toString(16) }) + '"' : '"' + a + '"'; case "number": return isFinite(a) ? String(a) : "null"; case "boolean": case "null": return String(a); case "object": if (!a) { return "null" } if (typeof a.toJSON === "function") { return stringify(a.toJSON()) } c = []; if (typeof a.length === "number" && !a.propertyIsEnumerable("length")) { f = a.length; for (d = 0; d < f; d += 1) { c.push(stringify(a[d], b) || "null") } return "[" + c.join(",") + "]" } if (b) { f = b.length; for (d = 0; d < f; d += 1) { e = b[d]; if (typeof e === "string") { h = stringify(a[e], b); if (h) { c.push(stringify(e) + ":" + h) } } } } else { for (e in a) { if (typeof e === "string") { h = stringify(a[e], b); if (h) { c.push(stringify(e) + ":" + h) } } } } return "{" + c.join(",") + "}" } } Date.prototype.toJSON = function () { return this.getUTCFullYear() + "-" + f(this.getUTCMonth() + 1) + "-" + f(this.getUTCDate()) + "T" + f(this.getUTCHours()) + ":" + f(this.getUTCMinutes()) + ":" + f(this.getUTCSeconds()) + "Z" }; var m = { "\b": "\\b", "	": "\\t", "\n": "\\n", "\f": "\\f", "\r": "\\r", '"': '\\"', "\\": "\\\\" }; return { stringify: stringify, parse: function (text, filter) { function walk(a, b) { var c, d; if (b && typeof b === "object") { for (c in b) { if (Object.prototype.hasOwnProperty.apply(b, [c])) { d = walk(c, b[c]); if (d !== undefined) { b[c] = d } } } } return filter(a, b) } var j; if (/^[\],:{}\s]*$/.test(text.replace(/\\./g, "@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, "]").replace(/(?:^|:|,)(?:\s*\[)+/g, ""))) { j = eval("(" + text + ")"); return typeof filter === "function" ? walk("", j) : j } throw new SyntaxError("parseJSON") } } } (); (function (a) { function c(a) { return typeof a == "object" ? a : { top: a, left: a} } var b = a.scrollTo = function (b, c, d) { a(window).scrollTo(b, c, d) }; b.defaults = { axis: "xy", duration: parseFloat(a.fn.jquery) >= 1.3 ? 0 : 1 }; b.window = function (b) { return a(window).scrollable() }; a.fn.scrollable = function () { return this.map(function () { var b = this, c = !b.nodeName || a.inArray(b.nodeName.toLowerCase(), ["iframe", "#document", "html", "body"]) != -1; if (!c) { return b } var d = (b.contentWindow || b).document || b.ownerDocument || b; return a.browser.safari || d.compatMode == "BackCompat" ? d.body : d.documentElement }) }; a.fn.scrollTo = function (d, e, f) { if (typeof e == "object") { f = e; e = 0 } if (typeof f == "function") { f = { onAfter: f} } if (d == "max") { d = 9e9 } f = a.extend({}, b.defaults, f); e = e || f.speed || f.duration; f.queue = f.queue && f.axis.length > 1; if (f.queue) { e /= 2 } f.offset = c(f.offset); f.over = c(f.over); return this.scrollable().each(function () { function l(a) { g.animate(j, e, f.easing, a && function () { a.call(this, d, f) }) } function m(a) { var c = "scroll" + a; if (!k) { return b[c] } var d = "client" + a, e = b.ownerDocument.documentElement, f = b.ownerDocument.body; return Math.max(e[c], f[c]) - Math.min(e[d], f[d]) } var b = this, g = a(b), h = d, i, j = {}, k = g.is("html,body"); switch (typeof h) { case "number": case "string": if (/^([+-]=)?\d+(\.\d+)?(px)?$/.test(h)) { h = c(h); break } h = a(h, this); case "object": if (h.is || h.style) { i = (h = a(h)).offset() } } a.each(f.axis.split(""), function (a, c) { var d = c == "x" ? "Left" : "Top", e = d.toLowerCase(), n = "scroll" + d, o = b[n], p = c == "x" ? "Width" : "Height"; if (i) { j[n] = i[e] + (k ? 0 : o - g.offset()[e]); if (f.margin) { j[n] -= parseInt(h.css("margin" + d)) || 0; j[n] -= parseInt(h.css("border" + d + "Width")) || 0 } j[n] += f.offset[e] || 0; if (f.over[e]) { j[n] += h[p.toLowerCase()]() * f.over[e] } } else { j[n] = h[e] } if (/^\d+$/.test(j[n])) { j[n] = j[n] <= 0 ? 0 : Math.min(j[n], m(p)) } if (!a && f.queue) { if (o != j[n]) { l(f.onAfterFirst) } delete j[n] } }); l(f.onAfter) }).end() } })(jQuery); wordObjects = {}; addArrow = "n"; searchBoxText = ""; currentStartsWith = ""; resultsShown = false; textboxFocus = false; linesShowingCount = 0; isTyping = false; altWordsToTranslit = new Object; lastLineAdded = ""; translitSuggestions = new Object; fullPath = ""; $(document).ready(function () { var a = $("table.stripedTable"); a.find("tr:even").addClass("rtZs"); a.find("tr:odd").addClass("rtPs"); a.find("tr:eq(0) td").css("border-top", "#B0BEC7 1px solid"); a.find("thead tr").removeClass("rtZs").addClass("rtPs").addClass("rtHdr"); $(".watermark").placeholder(); if (window.location.href.indexOf("dictionary") > -1) { $("table.componentsTable, table.examplesTable").css("border-top", "#B0BEC7 1px solid") } $(document).preloadImages("/img/balloon/ballon-arrow-bl.gif", "/img/balloon/ballon-arrow-br.gif", "/img/balloon/ballon-arrow-tl.gif", "/img/balloon/ballon-arrow-tr.gif", "/img/balloon/ballon-bgb.gif", "/img/balloon/ballon-bgl.gif", "/img/balloon/ballon-bgr.gif", "/img/balloon/ballon-bgt.gif", "/img/balloon/ballon-corner-bl.gif", "/img/balloon/ballon-corner-br.gif", "/img/balloon/ballon-corner-tl.gif", "/img/balloon/ballon-corner-tr.gif", "/img/balloon/balloon-close.gif") }); var Cufon = function () { function d(a) { var b = this.face = a.face, c = { " ": 1, " ": 1, "　": 1 }; this.glyphs = function (a) { var b, c = { "‑": "-", "­": "‑" }; for (b in c) { if (!o(c, b)) { continue } if (!a[b]) { a[b] = a[c[b]] } } return a } (a.glyphs); this.w = a.w; this.baseSize = parseInt(b["units-per-em"], 10); this.family = b["font-family"].toLowerCase(); this.weight = b["font-weight"]; this.style = b["font-style"] || "normal"; this.viewBox = function () { var a = b.bbox.split(/\s+/); var c = { minX: parseInt(a[0], 10), minY: parseInt(a[1], 10), maxX: parseInt(a[2], 10), maxY: parseInt(a[3], 10) }; c.width = c.maxX - c.minX; c.height = c.maxY - c.minY; c.toString = function () { return [this.minX, this.minY, this.width, this.height].join(" ") }; return c } (); this.ascent = -parseInt(b.ascent, 10); this.descent = -parseInt(b.descent, 10); this.height = -this.ascent + this.descent; this.spacing = function (a, b, d) { var e = this.glyphs, f, g, h, i = [], j = 0, k, l = -1, m = -1, n; while (n = a[++l]) { f = e[n] || this.missingGlyph; if (!f) { continue } if (g) { j -= h = g[n] || 0; i[m] -= h } k = f.w; if (isNaN(k)) { k = +this.w } if (k > 0) { k += b; if (c[n]) { k += d } } j += i[++m] = ~ ~k; g = f.k } i.total = j; return i } } function e() { var a = {}, b = { oblique: "italic", italic: "oblique" }; this.add = function (b) { (a[b.style] || (a[b.style] = {}))[b.weight] = b }; this.get = function (c, d) { var e = a[c] || a[b[c]] || a.normal || a.italic || a.oblique; if (!e) { return null } d = { normal: 400, bold: 700}[d] || parseInt(d, 10); if (e[d]) { return e[d] } var f = { 1: 1, 99: 0}[d % 100], g = [], h, i; if (f === undefined) { f = d > 400 } if (d == 500) { d = 400 } for (var j in e) { if (!o(e, j)) { continue } j = parseInt(j, 10); if (!h || j < h) { h = j } if (!i || j > i) { i = j } g.push(j) } if (d < h) { d = h } if (d > i) { d = i } g.sort(function (a, b) { return (f ? a >= d && b >= d ? a < b : a > b : a <= d && b <= d ? a > b : a < b) ? -1 : 1 }); return e[g[0]] } } function f() { function b(a, b) { try { if (a.contains) { return a.contains(b) } return a.compareDocumentPosition(b) & 16 } catch (c) { } return false } function c(a) { var c = a.relatedTarget; if (c && b(this, c)) { return } e(this, a.type == "mouseover") } function d(a) { e(this, a.type == "mouseenter") } function e(b, c) { setTimeout(function () { var d = z.get(b).options; a.replace(b, c ? p(d, d.hover) : d, true) }, 10) } this.attach = function (a) { if (a.onmouseenter === undefined) { j(a, "mouseover", c); j(a, "mouseout", c) } else { j(a, "mouseenter", d); j(a, "mouseleave", d) } } } function g() { function d(a) { var d = [], e; for (var f = 0; e = a[f]; ++f) { d[f] = b[c[e]] } return d } var b = [], c = {}; this.add = function (a, d) { c[a] = b.push(d) - 1 }; this.repeat = function () { var c = arguments.length ? d(arguments) : b, e; for (var f = 0; e = c[f++]; ) { a.replace(e[0], e[1], true) } } } function h() { function c(a) { return a.cufid || (a.cufid = ++b) } var a = {}, b = 0; this.get = function (b) { var d = c(b); return a[d] || (a[d] = {}) } } function i(a) { var b = {}, d = {}; this.extend = function (a) { for (var c in a) { if (o(a, c)) { b[c] = a[c] } } return this }; this.get = function (c) { return b[c] != undefined ? b[c] : a[c] }; this.getSize = function (a, b) { return d[a] || (d[a] = new c.Size(this.get(a), b)) }; this.isUsable = function () { return !!a } } function j(a, b, c) { if (a.addEventListener) { a.addEventListener(b, c, false) } else { if (a.attachEvent) { a.attachEvent("on" + b, function () { return c.call(a, window.event) }) } } } function k(a, b) { var c = z.get(a); if (c.options) { return a } if (b.hover && b.hoverables[a.nodeName.toLowerCase()]) { A.attach(a) } c.options = b; return a } function l(a) { var b = {}; return function (c) { if (!o(b, c)) { b[c] = a.apply(null, arguments) } return b[c] } } function m(a, b) { var d = c.quotedList(b.get("fontFamily").toLowerCase()), e; for (var f = 0; e = d[f]; ++f) { if (H[e]) { return H[e].get(b.get("fontStyle"), b.get("fontWeight")) } } return null } function n(a) { return document.getElementsByTagName(a) } function o(a, b) { return a.hasOwnProperty(b) } function p() { var a = {}, b, c; for (var d = 0, e = arguments.length; b = arguments[d], d < e; ++d) { for (c in b) { if (o(b, c)) { a[c] = b[c] } } } return a } function q(a, b, d, e, f, g) { var h = document.createDocumentFragment(), i; if (b === "") { return h } var j = e.separate; var k = b.split(J[j]), l = j == "words"; if (l && u) { if (/^\s/.test(b)) { k.unshift("") } if (/\s$/.test(b)) { k.push("") } } for (var m = 0, n = k.length; m < n; ++m) { i = G[e.engine](a, l ? c.textAlign(k[m], d, m, n) : k[m], d, e, f, g, m < n - 1); if (i) { h.appendChild(i) } } return h } function r(a, b) { var d = a.nodeName.toLowerCase(); if (b.ignore[d]) { return } if (b.onBeforeReplace) { b.onBeforeReplace(a, b) } var e = !b.textless[d], f = b.trim === "simple"; var g = c.getStyle(k(a, b)).extend(b); if (parseFloat(g.get("fontSize")) === 0) { return } var h = m(a, g), i, l, n, o, p, r; var u = b.softHyphens, v = false, x, y, z = /\u00ad/g; var A = b.modifyText; if (!h) { return } for (i = a.firstChild; i; i = n) { l = i.nodeType; n = i.nextSibling; if (e && l == 3) { if (u && a.nodeName.toLowerCase() != w) { x = i.data.indexOf("­"); if (x >= 0) { i.splitText(x); n = i.nextSibling; n.deleteData(0, 1); y = document.createElement(w); y.appendChild(document.createTextNode("­")); a.insertBefore(y, n); n = y; v = true } } if (o) { o.appendData(i.data); a.removeChild(i) } else { o = i } if (n) { continue } } if (o) { p = o.data; if (!u) { p = p.replace(z, "") } p = c.whiteSpace(p, g, o, r, f); if (A) { p = A(p, o, a, b) } a.replaceChild(q(h, p, g, b, i, a), o); o = null } if (l == 1) { if (i.firstChild) { if (i.nodeName.toLowerCase() == "cufon") { G[b.engine](h, null, g, b, i, a) } else { arguments.callee(i, b) } } r = i } } if (u && v) { s(a); if (!D) { j(window, "resize", t) } D = true } if (b.onAfterReplace) { b.onAfterReplace(a, b) } } function s(a) { var b, c, d, e, f, g, h, i; b = a.getElementsByTagName(w); for (i = 0; c = b[i]; ++i) { c.className = x; e = d = c.parentNode; if (e.nodeName.toLowerCase() != v) { f = document.createElement(v); f.appendChild(c.previousSibling); d.insertBefore(f, c); f.appendChild(c) } else { e = e.parentNode; if (e.nodeName.toLowerCase() == v) { d = e.parentNode; while (e.firstChild) { d.insertBefore(e.firstChild, e) } d.removeChild(e) } } } for (i = 0; c = b[i]; ++i) { c.className = ""; e = c.parentNode; d = e.parentNode; g = e.nextSibling || d.nextSibling; h = g.nodeName.toLowerCase() == v ? e : c.previousSibling; if (h.offsetTop >= g.offsetTop) { c.className = x; if (h.offsetTop < g.offsetTop) { f = document.createElement(v); d.insertBefore(f, e); f.appendChild(e); f.appendChild(g) } } } } function t() { if (F) { return } c.addClass(b.root(), y); clearTimeout(E); E = setTimeout(function () { F = true; c.removeClass(b.root(), y); s(document); F = false }, 100) } var a = function () { return a.replace.apply(null, arguments) }; var b = a.DOM = { ready: function () { var a = false, b = { loaded: 1, complete: 1 }; var c = [], d = function () { if (a) { return } a = true; for (var b; b = c.shift(); b()) { } }; if (document.addEventListener) { document.addEventListener("DOMContentLoaded", d, false); window.addEventListener("pageshow", d, false) } if (!window.opera && document.readyState) { (function () { b[document.readyState] ? d() : setTimeout(arguments.callee, 10) })() } if (document.readyState && document.createStyleSheet) { (function () { try { document.body.doScroll("left"); d() } catch (a) { setTimeout(arguments.callee, 1) } })() } j(window, "load", d); return function (b) { if (!arguments.length) { d() } else { a ? b() : c.push(b) } } } (), root: function () { return document.documentElement || document.body } }; var c = a.CSS = { Size: function (a, b) { this.value = parseFloat(a); this.unit = String(a).match(/[a-z%]*$/)[0] || "px"; this.convert = function (a) { return a / b * this.value }; this.convertFrom = function (a) { return a / this.value * b }; this.toString = function () { return this.value + this.unit } }, addClass: function (a, b) { var c = a.className; a.className = c + (c && " ") + b; return a }, color: l(function (a) { var b = {}; b.color = a.replace(/^rgba\((.*?),\s*([\d.]+)\)/, function (a, c, d) { b.opacity = parseFloat(d); return "rgb(" + c + ")" }); return b }), fontStretch: l(function (a) { if (typeof a == "number") { return a } if (/%$/.test(a)) { return parseFloat(a) / 100 } return { "ultra-condensed": .5, "extra-condensed": .625, condensed: .75, "semi-condensed": .875, "semi-expanded": 1.125, expanded: 1.25, "extra-expanded": 1.5, "ultra-expanded": 2}[a] || 1 }), getStyle: function (a) { var b = document.defaultView; if (b && b.getComputedStyle) { return new i(b.getComputedStyle(a, null)) } if (a.currentStyle) { return new i(a.currentStyle) } return new i(a.style) }, gradient: l(function (a) { var b = { id: a, type: a.match(/^-([a-z]+)-gradient\(/)[1], stops: [] }, c = a.substr(a.indexOf("(")).match(/([\d.]+=)?(#[a-f0-9]+|[a-z]+\(.*?\)|[a-z]+)/ig); for (var d = 0, e = c.length, f; d < e; ++d) { f = c[d].split("=", 2).reverse(); b.stops.push([f[1] || d / (e - 1), f[0]]) } return b }), quotedList: l(function (a) { var b = [], c = /\s*((["'])([\s\S]*?[^\\])\2|[^,]+)\s*/g, d; while (d = c.exec(a)) { b.push(d[3] || d[1]) } return b }), recognizesMedia: l(function (a) { var b = document.createElement("style"), c, d, e; b.type = "text/css"; b.media = a; try { b.appendChild(document.createTextNode("/**/")) } catch (f) { } d = n("head")[0]; d.insertBefore(b, d.firstChild); c = b.sheet || b.styleSheet; e = c && !c.disabled; d.removeChild(b); return e }), removeClass: function (a, b) { var c = RegExp("(?:^|\\s+)" + b + "(?=\\s|$)", "g"); a.className = a.className.replace(c, ""); return a }, supports: function (a, b) { var c = document.createElement("span").style; if (c[a] === undefined) { return false } c[a] = b; return c[a] === b }, textAlign: function (a, b, c, d) { if (b.get("textAlign") == "right") { if (c > 0) { a = " " + a } } else { if (c < d - 1) { a += " " } } return a }, textShadow: l(function (a) { if (a == "none") { return null } var b = [], c = {}, d, e = 0; var f = /(#[a-f0-9]+|[a-z]+\(.*?\)|[a-z]+)|(-?[\d.]+[a-z%]*)|,/ig; while (d = f.exec(a)) { if (d[0] == ",") { b.push(c); c = {}; e = 0 } else { if (d[1]) { c.color = d[1] } else { c[["offX", "offY", "blur"][e++]] = d[2] } } } b.push(c); return b }), textTransform: function () { var a = { uppercase: function (a) { return a.toUpperCase() }, lowercase: function (a) { return a.toLowerCase() }, capitalize: function (a) { return a.replace(/(?:^|\s)./g, function (a) { return a.toUpperCase() }) } }; return function (b, c) { var d = a[c.get("textTransform")]; return d ? d(b) : b } } (), whiteSpace: function () { var a = { inline: 1, "inline-block": 1, "run-in": 1 }; var b = /^\s+/, c = /\s+$/; return function (d, e, f, g, h) { if (h) { return d.replace(b, "").replace(c, "") } if (g) { if (g.nodeName.toLowerCase() == "br") { d = d.replace(b, "") } } if (a[e.get("display")]) { return d } if (!f.previousSibling) { d = d.replace(b, "") } if (!f.nextSibling) { d = d.replace(c, "") } return d } } () }; c.ready = function () { function i(a) { return a.disabled || j(a.sheet, a.media || "screen") } function j(a, b) { if (!c.recognizesMedia(b || "all")) { return true } if (!a || a.disabled) { return false } try { var d = a.cssRules, e; if (d) { a: for (var f = 0, g = d.length; e = d[f], f < g; ++f) { switch (e.type) { case 2: break; case 3: if (!j(e.styleSheet, e.media.mediaText)) { return false } break; default: break a } } } } catch (h) { } return true } function k() { if (document.createStyleSheet) { return true } var a, b; for (b = 0; a = g[b]; ++b) { if (a.rel.toLowerCase() == "stylesheet" && !i(a)) { return false } } for (b = 0; a = h[b]; ++b) { if (!i(a)) { return false } } return true } var a = !c.recognizesMedia("all"), d = false; var e = [], f = function () { a = true; for (var b; b = e.shift(); b()) { } }; var g = n("link"), h = n("style"); b.ready(function () { if (!d) { d = c.getStyle(document.body).isUsable() } if (a || d && k()) { f() } else { setTimeout(arguments.callee, 10) } }); return function (b) { if (a) { b() } else { e.push(b) } } } (); var u = " ".split(/\s+/).length == 0; var v = "cufonglue"; var w = "cufonshy"; var x = "cufon-shy-disabled"; var y = "cufon-viewport-resizing"; var z = new h; var A = new f; var B = new g; var C = false; var D = false; var E; var F = false; var G = {}, H = {}, I = { autoDetect: false, engine: null, forceHitArea: false, hover: false, hoverables: { a: true }, ignore: { applet: 1, canvas: 1, col: 1, colgroup: 1, head: 1, iframe: 1, map: 1, noscript: 1, optgroup: 1, option: 1, script: 1, select: 1, style: 1, textarea: 1, title: 1, pre: 1 }, modifyText: null, onAfterReplace: null, onBeforeReplace: null, printable: true, selector: window.Sizzle || window.jQuery && function (a) { return jQuery(a) } || window.dojo && dojo.query || window.glow && glow.dom && glow.dom.get || window.Ext && Ext.query || window.YAHOO && YAHOO.util && YAHOO.util.Selector && YAHOO.util.Selector.query || window.$$ && function (a) { return $$(a) } || window.$ && function (a) { return $(a) } || document.querySelectorAll && function (a) { return document.querySelectorAll(a) } || n, separate: "words", softHyphens: true, textless: { dl: 1, html: 1, ol: 1, table: 1, tbody: 1, thead: 1, tfoot: 1, tr: 1, ul: 1 }, textShadow: "none", trim: "advanced" }; var J = { words: /\s/.test(" ") ? /[^\S\u00a0]+/ : /\s+/, characters: "", none: /^/ }; a.now = function () { b.ready(); return a }; a.refresh = function () { B.repeat.apply(B, arguments); return a }; a.registerEngine = function (b, c) { if (!c) { return a } G[b] = c; return a.set("engine", b) }; a.registerFont = function (b) { if (!b) { return a } var c = new d(b), f = c.family; if (!H[f]) { H[f] = new e } H[f].add(c); return a.set("fontFamily", '"' + f + '"') }; a.replace = function (d, e, f) { e = p(I, e); if (!e.engine) { return a } if (!C) { c.addClass(b.root(), "cufon-active cufon-loading"); c.ready(function () { c.addClass(c.removeClass(b.root(), "cufon-loading"), "cufon-ready") }); C = true } if (e.hover) { e.forceHitArea = true } if (e.autoDetect) { delete e.fontFamily } if (typeof e.textShadow == "string") { e.textShadow = c.textShadow(e.textShadow) } if (typeof e.color == "string" && /^-/.test(e.color)) { e.textGradient = c.gradient(e.color) } else { delete e.textGradient } if (!f) { B.add(d, arguments) } if (d.nodeType || typeof d == "string") { d = [d] } c.ready(function () { for (var b = 0, c = d.length; b < c; ++b) { var f = d[b]; if (typeof f == "string") { a.replace(e.selector(f), e, true) } else { r(f, e) } } }); return a }; a.set = function (b, c) { I[b] = c; return a }; return a } (); Cufon.registerEngine("vml", function () { function d(a, b) { return e(a, /(?:em|ex|%)$|^[a-z-]+$/i.test(b) ? "1em" : b) } function e(a, b) { if (!isNaN(b) || /px$/i.test(b)) { return parseFloat(b) } var c = a.style.left, d = a.runtimeStyle.left; a.runtimeStyle.left = a.currentStyle.left; a.style.left = b.replace("%", "em"); var e = a.style.pixelLeft; a.style.left = c; a.runtimeStyle.left = d; return e } function f(a, b, c, d) { var f = "computed" + d, g = b[f]; if (isNaN(g)) { g = b.get(d); b[f] = g = g == "normal" ? 0 : ~ ~c.convertFrom(e(a, g)) } return g } function h(a) { var b = a.id; if (!g[b]) { var c = a.stops, d = document.createElement("cvml:fill"), e = []; d.type = "gradient"; d.angle = 180; d.focus = "0"; d.method = "none"; d.color = c[0][1]; for (var f = 1, h = c.length - 1; f < h; ++f) { e.push(c[f][0] * 100 + "% " + c[f][1]) } d.colors = e.join(","); d.color2 = c[h][1]; g[b] = d } return g[b] } var a = document.namespaces; if (!a) { return } a.add("cvml", "urn:schemas-microsoft-com:vml"); a = null; var b = document.createElement("cvml:shape"); b.style.behavior = "url(#default#VML)"; if (!b.coordsize) { return } b = null; var c = (document.documentMode || 0) < 8; document.write(('<style type="text/css">cufoncanvas{text-indent:0;}@media screen{cvml\\:shape,cvml\\:rect,cvml\\:fill,cvml\\:shadow{behavior:url(#default#VML);display:block;antialias:true;position:absolute;}cufoncanvas{position:absolute;text-align:left;}cufon{display:inline-block;position:relative;vertical-align:' + (c ? "middle" : "text-bottom") + ";}cufon cufontext{position:absolute;left:-10000in;font-size:1px;text-align:left;}cufonshy.cufon-shy-disabled,.cufon-viewport-resizing cufonshy{display:none;}cufonglue{white-space:nowrap;display:inline-block;}.cufon-viewport-resizing cufonglue{white-space:normal;}a cufon{cursor:pointer}}@media print{cufon cufoncanvas{display:none;}}</style>").replace(/;/g, "!important;")); var g = {}; return function (a, b, g, i, j, k, l) { var m = b === null; if (m) { b = j.alt } var n = a.viewBox; var o = g.computedFontSize || (g.computedFontSize = new Cufon.CSS.Size(d(k, g.get("fontSize")) + "px", a.baseSize)); var p, q; if (m) { p = j; q = j.firstChild } else { p = document.createElement("cufon"); p.className = "cufon cufon-vml"; p.alt = b; q = document.createElement("cufoncanvas"); p.appendChild(q); if (i.printable) { var r = document.createElement("cufontext"); r.appendChild(document.createTextNode(b)); p.appendChild(r) } if (!l) { p.appendChild(document.createElement("cvml:shape")) } } var s = p.style; var t = q.style; var u = o.convert(n.height), v = Math.ceil(u); var w = v / u; var x = w * Cufon.CSS.fontStretch(g.get("fontStretch")); var y = n.minX, z = n.minY; t.height = v; t.top = Math.round(o.convert(z - a.ascent)); t.left = Math.round(o.convert(y)); s.height = o.convert(a.height) + "px"; var B = g.get("color"); var C = Cufon.CSS.textTransform(b, g).split(""); var F = a.spacing(C, f(k, g, o, "letterSpacing"), f(k, g, o, "wordSpacing")); if (!F.length) { return null } var I = F.total; var J = -y + I + (n.width - F[F.length - 1]); var K = o.convert(J * x), L = Math.round(K); var M = J + "," + n.height, N; var O = "r" + M + "ns"; var P = i.textGradient && h(i.textGradient); var Q = a.glyphs, R = 0; var S = i.textShadow; var T = -1, U = 0, V; while (V = C[++T]) { var W = Q[C[T]] || a.missingGlyph, X; if (!W) { continue } if (m) { X = q.childNodes[U]; while (X.firstChild) { X.removeChild(X.firstChild) } } else { X = document.createElement("cvml:shape"); q.appendChild(X) } X.stroked = "f"; X.coordsize = M; X.coordorigin = N = y - R + "," + z; X.path = (W.d ? "m" + W.d + "xe" : "") + "m" + N + O; X.fillcolor = B; if (P) { X.appendChild(P.cloneNode(false)) } var Y = X.style; Y.width = L; Y.height = v; if (S) { var Z = S[0], $ = S[1]; var _ = Cufon.CSS.color(Z.color), ab; var bb = document.createElement("cvml:shadow"); bb.on = "t"; bb.color = _.color; bb.offset = Z.offX + "," + Z.offY; if ($) { ab = Cufon.CSS.color($.color); bb.type = "double"; bb.color2 = ab.color; bb.offset2 = $.offX + "," + $.offY } bb.opacity = _.opacity || ab && ab.opacity || 1; X.appendChild(bb) } R += F[U++] } var cb = X.nextSibling, db, eb; if (i.forceHitArea) { if (!cb) { cb = document.createElement("cvml:rect"); cb.stroked = "f"; cb.className = "cufon-vml-cover"; db = document.createElement("cvml:fill"); db.opacity = 0; cb.appendChild(db); q.appendChild(cb) } eb = cb.style; eb.width = L; eb.height = v } else { if (cb) { q.removeChild(cb) } } s.width = Math.max(Math.ceil(o.convert(I * x)), 0); if (c) { var fb = g.computedYAdjust; if (fb === undefined) { var gb = g.get("lineHeight"); if (gb == "normal") { gb = "1em" } else { if (!isNaN(gb)) { gb += "em" } } g.computedYAdjust = fb = .5 * (e(k, gb) - parseFloat(s.height)) } if (fb) { s.marginTop = Math.ceil(fb) + "px"; s.marginBottom = fb + "px" } } return p } } ()); Cufon.registerEngine("canvas", function () { function e(a, b) { var c = 0, d = 0; var e = [], f = /([mrvxe])([^a-z]*)/g, g; a: for (var h = 0; g = f.exec(a); ++h) { var i = g[2].split(","); switch (g[1]) { case "v": e[h] = { m: "bezierCurveTo", a: [c + ~ ~i[0], d + ~ ~i[1], c + ~ ~i[2], d + ~ ~i[3], c += ~ ~i[4], d += ~ ~i[5]] }; break; case "r": e[h] = { m: "lineTo", a: [c += ~ ~i[0], d += ~ ~i[1]] }; break; case "m": e[h] = { m: "moveTo", a: [c = ~ ~i[0], d = ~ ~i[1]] }; break; case "x": e[h] = { m: "closePath" }; break; case "e": break a } b[e[h].m].apply(b, e[h].a) } return e } function f(a, b) { for (var c = 0, d = a.length; c < d; ++c) { var e = a[c]; b[e.m].apply(b, e.a) } } var a = document.createElement("canvas"); if (!a || !a.getContext || !a.getContext.apply) { return } a = null; var b = Cufon.CSS.supports("display", "inline-block"); var c = !b && (document.compatMode == "BackCompat" || /frameset|transitional/i.test(document.doctype.publicId)); var d = document.createElement("style"); d.type = "text/css"; d.appendChild(document.createTextNode(("cufon{text-indent:0;}@media screen,projection{cufon{display:inline;display:inline-block;position:relative;vertical-align:middle;" + (c ? "" : "font-size:1px;line-height:1px;") + "}cufon cufontext{display:-moz-inline-box;display:inline-block;width:0;height:0;text-align:left;text-indent:-10000in;}" + (b ? "cufon canvas{position:relative;}" : "cufon canvas{position:absolute;}") + "cufonshy.cufon-shy-disabled,.cufon-viewport-resizing cufonshy{display:none;}cufonglue{white-space:nowrap;display:inline-block;}.cufon-viewport-resizing cufonglue{white-space:normal;}}@media print{cufon{padding:0;}cufon canvas{display:none;}}").replace(/;/g, "!important;"))); document.getElementsByTagName("head")[0].appendChild(d); return function (a, c, d, g, h, i) { function R() { var b = a.glyphs, c, d = -1, g = -1, h; P.scale(K, 1); while (h = w[++d]) { var c = b[w[d]] || a.missingGlyph; if (!c) { continue } if (c.d) { P.beginPath(); if (c.code) { f(c.code, P) } else { c.code = e("m" + c.d, P) } P.fill() } P.translate(x[++g], 0) } P.restore() } var j = c === null; if (j) { c = h.getAttribute("alt") } var k = a.viewBox; var l = d.getSize("fontSize", a.baseSize); var m = 0, n = 0, o = 0, p = 0; var q = g.textShadow, r = []; if (q) { for (var s = q.length; s--; ) { var t = q[s]; var u = l.convertFrom(parseFloat(t.offX)); var v = l.convertFrom(parseFloat(t.offY)); r[s] = [u, v]; if (v < m) { m = v } if (u > n) { n = u } if (v > o) { o = v } if (u < p) { p = u } } } var w = Cufon.CSS.textTransform(c, d).split(""); var x = a.spacing(w, ~ ~l.convertFrom(parseFloat(d.get("letterSpacing")) || 0), ~ ~l.convertFrom(parseFloat(d.get("wordSpacing")) || 0)); if (!x.length) { return null } var y = x.total; n += k.width - x[x.length - 1]; p += k.minX; var z, C; if (j) { z = h; C = h.firstChild } else { z = document.createElement("cufon"); z.className = "cufon cufon-canvas"; z.setAttribute("alt", c); C = document.createElement("canvas"); z.appendChild(C); if (g.printable) { var E = document.createElement("cufontext"); E.appendChild(document.createTextNode(c)); z.appendChild(E) } } var F = z.style; var G = C.style; var H = l.convert(k.height); var I = Math.ceil(H); var J = I / H; var K = J * Cufon.CSS.fontStretch(d.get("fontStretch")); var L = y * K; var M = Math.ceil(l.convert(L + n - p)); var N = Math.ceil(l.convert(k.height - m + o)); C.width = M; C.height = N; G.width = M + "px"; G.height = N + "px"; m += k.minY; G.top = Math.round(l.convert(m - a.ascent)) + "px"; G.left = Math.round(l.convert(p)) + "px"; var O = Math.max(Math.ceil(l.convert(L)), 0) + "px"; if (b) { F.width = O; F.height = l.convert(a.height) + "px" } else { F.paddingLeft = O; F.paddingBottom = l.convert(a.height) - 1 + "px" } var P = C.getContext("2d"), Q = H / k.height; P.scale(Q, Q * J); P.translate(-p, -m); P.save(); if (q) { for (var s = q.length; s--; ) { var t = q[s]; P.save(); P.fillStyle = t.color; P.translate.apply(P, r[s]); R() } } var S = g.textGradient; if (S) { var T = S.stops, U = P.createLinearGradient(0, k.minY, 0, k.maxY); for (var s = 0, V = T.length; s < V; ++s) { U.addColorStop.apply(U, T[s]) } P.fillStyle = U } else { P.fillStyle = d.get("color") } R(); return z } } ()); $balloonClose = new Object; $balloonBl = new Object; $balloonBr = new Object; $balloonTl = new Object; $balloonTr = new Object; $balloonTbg = new Object; $balloonBbg = new Object; $balloonLbg = new Object; $balloonRbg = new Object; $balloonContainer = new Object; $balloonArrow = new Object; $balloonCornersContainer = new Object; highlightedIds = new Array; hideLayer = ""; arrowPos = ""; lastBalloonTop = ""; cornerHeight = 9; cornerWidth = 8; offsetFromLeft = 35; borderHeight = 2; arrowHeight = 23; (function (a) { a.extend({ placeholder: { settings: { focusClass: "placeholderFocus", activeClass: "placeholder", overrideSupport: false, preventRefreshIssues: true }, debug: false, log: function (b) { if (!a.placeholder.debug) { return } b = "[Placeholder] " + b; a.placeholder.hasFirebug ? console.log(b) : a.placeholder.hasConsoleLog ? window.console.log(b) : alert(b) }, hasFirebug: "console" in window && "firebug" in window.console, hasConsoleLog: "console" in window && "log" in window.console} }); a.support.placeholder = "placeholder" in document.createElement("input"); a.fn.plVal = a.fn.val; a.fn.val = function (b) { a.placeholder.log("in val"); if (this[0]) { a.placeholder.log("have found an element"); var c = a(this[0]); if (b != undefined) { a.placeholder.log("in setter"); var d = c.plVal(); var e = a(this).plVal(b); if (c.hasClass(a.placeholder.settings.activeClass) && d == c.attr("placeholder")) { c.removeClass(a.placeholder.settings.activeClass) } return e } if (c.hasClass(a.placeholder.settings.activeClass) && c.plVal() == c.attr("placeholder")) { a.placeholder.log("returning empty because it's a placeholder"); return "" } else { a.placeholder.log("returning original val"); return c.plVal() } } a.placeholder.log("returning undefined"); return undefined }; a(window).bind("beforeunload.placeholder", function () { var b = a("input." + a.placeholder.settings.activeClass); if (b.length > 0) { b.val("").attr("autocomplete", "off") } }); a.fn.placeholder = function (b) { b = a.extend({}, a.placeholder.settings, b); if (!b.overrideSupport && a.support.placeholder) { return this } return this.each(function () { var c = a(this); if (!c.is("[placeholder]")) { return } if (c.is(":password")) { return } if (b.preventRefreshIssues) { c.attr("autocomplete", "off") } c.bind("focus.placeholder", function () { var c = a(this); if (this.value == c.attr("placeholder") && c.hasClass(b.activeClass)) { c.val("").removeClass(b.activeClass).addClass(b.focusClass) } }); c.bind("blur.placeholder", function () { var c = a(this); c.removeClass(b.focusClass); if (this.value == "") { c.val(c.attr("placeholder")).addClass(b.activeClass) } }); c.triggerHandler("blur"); c.parents("form").submit(function () { c.triggerHandler("focus.placeholder") }) }) } })(jQuery);