<?php
//--------------------------------------------------------------------------------
// Copyright 2005 - 2009 Arketec Limited. (http://www.arketec.com)
// Released under the GPL license (http://www.gnu.org/licenses/gpl.html)
//--------------------------------------------------------------------------------
/**
 * @package    ARK
 * @subpackage Controller
 * @author     Cambell Prince <cambell@arketec.com>
 * @link       http://www.arketec.com
 */

/**
 */
require_once (SGF_CORE.'Controller/Part.php');

/**
 * A Control is a Part that exists within a Form.
 * It renders an editable data element obtained from the Form.
 * It handles onData to set data into the Form's IDataSpace (using $name as the key)
 * after the from is POST'ed.
 * @package		ARK
 * @subpackage	Controller
 */
class Control extends Part {
	private $_form;
	private $_id;
	private $_label;

	/**
	 * Constructor
	 * @param string $name
	 * @param IViewProvider $viewProvider
	 * @param string $position
	 * @param Form	 $form	A reference to the Form in which this Control exists
	 * @param string $id
	 * @param string $label
	 */
	function __construct($name, $viewProvider, $position, $form, $id, $label) {
		parent::__construct($name, $viewProvider, $position);
		$this->_form = $form;
		assert($this->_form);
		$this->_id = $id;
		$this->_label = $label;
	}

	/**
	 * Returns true if this Control is required in the Form.
	 * Implemented by asking the Forms Validator
	 * @return boolean
	 */
	function isRequired() {
		$ret = false;
		$validator = $this->_form->getValidator();
		if ($validator) {
			$ret = $validator->isRequired($this->_name);
		}
		return $ret;
	}

	/**
	 * canHandle
	 * Can always handle EVT_Data events
	 * @param Event
	 * @param Traversal
	 */
	function canHandle($e, $t) {
		$type = $e->getType();
		switch ($type) {
			case EVT_Data:
				$ret = true;
				break;

			default:
				$ret = parent::canHandle($e, $t);
		}
		return $ret;
	}

	/**
	 * An EVT_Data event is typically generated by a Form.
	 * The default behaviour of a Control is to set it's own value in the forms IDataSpace.
	 * @param Event
	 * @param Traversal
	 * @return bool Currently always true
	 * @todo return value could be true if OK, false if $_POST not set
	 */
	function onData($e, $t) {
		$data = $t->dataGet();
		$data->set($this->_name, $_POST[$this->_name]);
		return TRUE; //!!! This could be true if OK, false if $_POST not set
	}

	/**
	 * Returns the data bound to this Control.
	 * Gets the value of key <ControlName> from the data currently set
	 * in the Traversal
	 * @param Traversal
	 * @return string
	 */
	function getValue($t) {
		$data = $t->dataGet();
		return $data->get($this->getName());
	}

	/**
	 * Returns the label of this Control.
	 * @return string
	 */
	function getLabel() {
		return $this->_label;
	}

	/**
	 * Returns the name of this Control.
	 * The name is the data name, i.e. the key used in the Schema, Validator, and Form to represent this element.
	 * @return string
	 */
	function getName() {
		return $this->_name;
	}

	/**
	 * Returns the type of this Control.
	 * Implemented by asking Schema::getType of the Form.
	 * @return DT_XXX
	 * @todo not sure if this is required anymore
	 */
	/*
	 function getType() {
	 $ret = DT_Unknown;
	 $schema = $this->_form->getSchema();
	 if ($schema) {
	 $ret = $schema->getType($this->name);
	 }
	 return $ret;
	 }
	 */
}

